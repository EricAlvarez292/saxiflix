plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("api.properties")))

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.saxipapsi.saxi_movie"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            buildConfigField("String", "API_KEY", "\"" + localProperties['API_KEY'] + "\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    /*Retrofit*/
    def retrofit_version = "2.9.0"
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version")
    implementation("com.squareup.retrofit2:converter-gson:$retrofit_version")
    def okhttp_version = "4.10.0"
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttp_version")

    /*Koin DI*/
    def koin_version = "3.2.0"
    implementation("io.insert-koin:koin-core:$koin_version")
    implementation("io.insert-koin:koin-android:$koin_version")

    // Coroutines
    def coroutine_version = "1.6.4"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version")

    // Coroutines life cycle scope
    def coroutine_lifecycle_version = "2.6.1"
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$coroutine_lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$coroutine_lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-process:$coroutine_lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$coroutine_lifecycle_version")

    /*Paging3*/
    def paging_version = "3.2.1"
    implementation("androidx.paging:paging-runtime:$paging_version")
    // alternatively - without Android dependencies for tests
    testImplementation("androidx.paging:paging-common:$paging_version")

    /*Image*/
    implementation 'com.github.bumptech.glide:glide:4.15.1'

    /*Youtube*/
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:12.1.0'

    /*Segmented button*/
    implementation 'com.github.addisonelliott:SegmentedButton:3.1.9'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}